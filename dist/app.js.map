{"version":3,"sources":["../src/app.js"],"names":[],"mappings":"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","file":"src/app.js","sourcesContent":["angular.module('app', ['uiGmapgoogle-maps'])\n    .config(['uiGmapGoogleMapApiProvider', function(uiGmapGoogleMapApiProvider) {\n        uiGmapGoogleMapApiProvider.configure({\n            // api_key is a global loaded from an external file\n            key: api_key,\n            v: '3.20',\n            libraries: 'weather,geometry,visualization'\n        });\n    }])\n    .directive('app', ()=> {\n        return {\n            restrict: 'E',\n            replace: true,\n            controller: MapController,\n            controllerAs: 'vm',\n            template: `\n                <div>\n                    <ui-gmap-google-map center='vm.map.center' zoom='vm.map.zoom'>\n                        <ui-gmap-markers\n                                models='vm.markers'\n                                idKey=\"'id'\"\n                                type=\"'spider'\"\n                                fit=\"true\"\n                                coords=\"'coords'\"\n                                options=\"'mapOptions'\"\n                                >\n                        </ui-gmap-markers>\n                    </ui-gmap-google-map>\n                </div>\n            `\n        };\n    })\n;\n\nclass MapController {\n    constructor($http, uiGmapGoogleMapApi, $q) {\n        var self = this;\n        this.markers = [];\n        this.map = {\n            center: {\n                latitude: 45,\n                longitude: -73\n            },\n            zoom: 8\n        };\n\n        var promises = [\n            uiGmapGoogleMapApi,\n            $http.get('lib/map-pin.svg')\n        ];\n        $q.all(promises).then(function(data) {\n            self.setMarkers(data[1]);\n        });\n\n        this.setMarkers = function(svgString) {\n            for (var ii = 1; ii <= 400; ii++) {\n                var tempString = svgString.data;\n\n                // randomize the icons color and opacity\n                var rand1 = Math.round(Math.random() * 2);\n                if (rand1 % 2) {\n                    tempString = tempString.split('fill:#0000ff').join('fill:#ff0000');\n                }\n                var rand2 = Math.round(Math.random() * 3);\n                if (rand2 % 3) {\n                    tempString = tempString.split('fill-opacity:1').join('fill-opacity:.3');\n                }\n\n                self.markers.push({\n                    id: ii,\n                    coords: {\n                        latitude: self.map.center.latitude + (Math.random() * 2),\n                        longitude: self.map.center.longitude + (Math.random() * 2)\n                    },\n                    mapOptions: {\n                        icon: {\n                            // replace the placeholder with the correct label and size/scale/anchor the marker\n                            url: 'data:image/svg+xml,' + tempString.split('AAA').join(ii),\n                            size: new google.maps.Size(21, 30),\n                            scaledSize: new google.maps.Size(21, 30),\n                            anchor: new google.maps.Point(10.5, 30)\n                        },\n                        zIndex: 1000\n                    }\n                });\n            }\n        }\n    }\n}\n\nMapController.$inject = ['$http', 'uiGmapGoogleMapApi', '$q'];\n"]}